package bot

import (
	"context"
	"fmt"
	"strings"
	"time"

	"volvomaster/internal/logger"
	"volvomaster/internal/models"
	"volvomaster/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type Bot struct {
	api       *tgbotapi.BotAPI
	dbService *services.DatabaseService
	logger    *logger.Logger
	stopChan  chan struct{}
	isRunning bool
}

func NewBot(token string, dbService *services.DatabaseService) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %w", err)
	}

	return &Bot{
		api:       api,
		dbService: dbService,
		logger:    logger.New(),
		stopChan:  make(chan struct{}),
	}, nil
}

func (b *Bot) Start() {
	b.isRunning = true
	b.logger.Info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			if !b.isRunning {
				return
			}
			go b.handleUpdate(update)
		case <-b.stopChan:
			return
		}
	}
}

func (b *Bot) Stop() {
	b.isRunning = false
	close(b.stopChan)
	b.logger.Info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	ctx := context.Background()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã
	if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
		return
	}

	if update.Message == nil {
		return
	}

	message := update.Message
	userID := message.From.ID
	chatID := message.Chat.ID

	b.logger.Info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, message.Text)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user := &models.User{
		UserID:    userID,
		ChatID:    chatID,
		Username:  message.From.UserName,
		FirstName: message.From.FirstName,
		LastName:  message.From.LastName,
		UpdatedAt: time.Now(),
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	if message.Contact != nil && message.Contact.UserID == userID {
		user.Phone = message.Contact.PhoneNumber
	}

	if err := b.dbService.SaveUser(ctx, user); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session, err := b.dbService.GetUserSession(ctx, userID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chat_id –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	if session.ChatID == 0 {
		session.ChatID = chatID
		if err := b.dbService.SaveUserSession(ctx, session); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		b.handleCommand(ctx, message, session)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
	b.handleStage(ctx, message, session)
}

func (b *Bot) handleCommand(ctx context.Context, message *tgbotapi.Message, session *models.UserSession) {
	chatID := message.Chat.ID

	switch message.Command() {
	case "start":
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
		session.Stage = models.StagePersonalInfo
		session.Data = make(map[string]interface{})
		session.RequestID = primitive.NilObjectID

		if err := b.dbService.SaveUserSession(ctx, session); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		}

		welcomeText := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä Volvo! üöó

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É. –ù–∞—á–Ω–µ–º —Å –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`

		b.sendMessage(chatID, welcomeText)

	case "cancel":
		// –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É
		if !session.RequestID.IsZero() {
			request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
			if err == nil {
				request.Status = "cancelled"
				b.dbService.SaveServiceRequest(ctx, request)
			}
		}

		session.Stage = models.StageStart
		session.Data = make(map[string]interface{})
		session.RequestID = primitive.NilObjectID
		b.dbService.SaveUserSession(ctx, session)

		b.sendMessage(chatID, "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.")

	case "help":
		helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
		b.sendMessage(chatID, helpText)
	}
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	userID := callback.From.ID
	data := callback.Data

	b.logger.Info("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, data)

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session, err := b.dbService.GetUserSession(ctx, userID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	if strings.HasPrefix(data, "date_") {
		b.handleDateSelection(ctx, callback, session)
	} else if strings.HasPrefix(data, "time_") {
		b.handleTimeSelection(ctx, callback, session)
	} else if strings.HasPrefix(data, "engine_") {
		b.handleEngineTypeSelection(ctx, callback, session)
	} else if strings.HasPrefix(data, "appeared_") {
		b.handleProblemAppearedSelection(ctx, callback, session)
	} else if strings.HasPrefix(data, "frequency_") {
		b.handleProblemFrequencySelection(ctx, callback, session)
	} else {
		b.answerCallback(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback")
	}
}

func (b *Bot) handleStage(ctx context.Context, message *tgbotapi.Message, session *models.UserSession) {
	chatID := message.Chat.ID

	switch session.Stage {
	case models.StageStart:
		// –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
		session.Stage = models.StagePersonalInfo
		b.sendMessage(chatID, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
		b.dbService.SaveUserSession(ctx, session)

	case models.StagePersonalInfo:
		b.handlePersonalInfoStage(ctx, message, session)

	case models.StageCarInfo:
		b.handleCarInfoStage(ctx, message, session)

	case models.StageProblemInfo:
		b.handleProblemInfoStage(ctx, message, session)

	case models.StageDateSelection:
		b.handleDateSelectionStage(ctx, message, session)

	case models.StageCompleted:
		b.sendMessage(chatID, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.")
	}
}

func (b *Bot) handlePersonalInfoStage(ctx context.Context, message *tgbotapi.Message, session *models.UserSession) {
	chatID := message.Chat.ID
	text := message.Text

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ–º
	if session.Data["name"] == nil {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
		session.Data["name"] = text

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		contactText := `–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏:`
		b.sendMessage(chatID, contactText)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
		b.dbService.SaveUserSession(ctx, session)
	} else {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
		contact := text

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª @username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
		if strings.HasPrefix(contact, "@") {
			session.Data["contact"] = contact
		} else {
			// –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
			session.Data["contact"] = contact
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		user, err := b.dbService.GetUser(ctx, message.From.ID)
		if err == nil {
			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
			if !strings.HasPrefix(contact, "@") {
				user.Phone = contact
			}
			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª Telegram username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
			if strings.HasPrefix(contact, "@") {
				user.Telegram = contact
			}
			if err := b.dbService.SaveUser(ctx, user); err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			}
		} else {
			b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
		}

		// –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
		request := &models.ServiceRequest{
			UserID:  message.From.ID,
			ChatID:  chatID,
			Name:    session.Data["name"].(string),
			Contact: session.Data["contact"].(string),
			Stage:   models.StageCarInfo,
			Status:  "in_progress",
		}

		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		session.RequestID = request.ID
		session.Stage = models.StageCarInfo
		session.Data = make(map[string]interface{})

		b.dbService.SaveUserSession(ctx, session)

		// –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
		msg := tgbotapi.NewMessage(chatID, "")
		msg.ReplyMarkup = removeKeyboard
		b.api.Send(msg)

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
		carInfoText := `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.

–ö–∞–∫–∞—è —É –≤–∞—Å –º–æ–¥–µ–ª—å Volvo?`
		b.sendMessage(chatID, carInfoText)
	}
}

func (b *Bot) handleCarInfoStage(ctx context.Context, message *tgbotapi.Message, session *models.UserSession) {
	chatID := message.Chat.ID
	text := message.Text

	request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ–º
	if request.VolvoModel == "" {
		request.VolvoModel = text
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		b.sendMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
	} else if request.Year == "" {
		request.Year = text
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
		b.showEngineTypes(chatID)
	} else if request.EngineType == "" {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback
		b.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ.")
	} else if request.EngineVolume == "" {
		request.EngineVolume = text
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		b.sendMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç:")
	} else if request.Mileage == "" {
		request.Mileage = text

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
		request.Stage = models.StageProblemInfo
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		session.Stage = models.StageProblemInfo
		b.dbService.SaveUserSession(ctx, session)

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ
		problemText := `–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º.

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?
(–ù–∞–ø—Ä–∏–º–µ—Ä: "–≥—Ä–µ–º–∏—Ç —Å–ø–µ—Ä–µ–¥–∏", "–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –º–∞—Å–ª–æ", "–æ—à–∏–±–∫–∞ –ø–æ –¥–≤–∏–≥–∞—Ç–µ–ª—é", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª–∏–º–∞—Ç")`
		b.sendMessage(chatID, problemText)
	}
}

func (b *Bot) handleProblemInfoStage(ctx context.Context, message *tgbotapi.Message, session *models.UserSession) {
	chatID := message.Chat.ID
	text := message.Text

	request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ–º
	if request.Problem == "" {
		request.Problem = text
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		b.showProblemAppeared(chatID)
	} else if request.ProblemFirstAppeared == "" {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ callback
		b.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã—à–µ.")
	} else if request.ProblemFrequency == "" {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ callback
		b.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã—à–µ.")
	} else if request.SafetyImpact == "" {
		request.SafetyImpact = text
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		b.sendMessage(chatID, "–£–∂–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏? (–ï—Å–ª–∏ –¥–∞ ‚Äî —á—Ç–æ –¥–µ–ª–∞–ª–∏ –∏ –≥–¥–µ?)")
	} else if request.PreviousRepairs == "" {
		request.PreviousRepairs = text
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		b.sendMessage(chatID, "–ú–µ–Ω—è–ª–∏ –ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ? (–ù–∞–ø—Ä–∏–º–µ—Ä: \"–º–µ–Ω—è–ª–∏ –ø–æ–¥–≤–µ—Å–∫—É –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥\")")
	} else if request.RecentChanges == "" {
		request.RecentChanges = text

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
		request.Stage = models.StageDateSelection
		if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		session.Stage = models.StageDateSelection
		b.dbService.SaveUserSession(ctx, session)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
		b.showAvailableDates(chatID)
	}
}

func (b *Bot) handleDateSelectionStage(ctx context.Context, message *tgbotapi.Message, session *models.UserSession) {
	chatID := message.Chat.ID

	// –í —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	// Callback-–∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ handleCallbackQuery
	b.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ.")
}

func (b *Bot) showAvailableDates(chatID int64) {
	ctx := context.Background()

	dates, err := b.dbService.GetAvailableDates(ctx)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç: %v", err)
		b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
		return
	}

	if len(dates) == 0 {
		b.sendMessage(chatID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –¥–Ω—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	uniqueDates := make(map[string]*models.AvailableDate)
	for _, date := range dates {
		dateKey := date.Date.Format("2006-01-02")
		if _, exists := uniqueDates[dateKey]; !exists {
			uniqueDates[dateKey] = date
		}
	}

	text := "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, date := range uniqueDates {
		// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
		weekday := getWeekdayName(date.Date.Weekday())
		dateText := date.Date.Format("02.01.2006") + " (" + weekday + ")"

		row := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				dateText,
				fmt.Sprintf("date_%s", date.ID.Hex()),
			),
		}
		keyboard = append(keyboard, row)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) showTimeSlots(chatID int64, availableDate *models.AvailableDate) {
	text := fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ %s:\n\n",
		availableDate.Date.Format("02.01.2006"))

	var keyboard [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	for i, slot := range availableDate.TimeSlots {
		if !slot.IsBooked {
			button := tgbotapi.NewInlineKeyboardButtonData(
				slot.Time,
				fmt.Sprintf("time_%s_%s", availableDate.ID.Hex(), slot.Time),
			)
			row = append(row, button)

			// –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
			if len(row) == 3 || i == len(availableDate.TimeSlots)-1 {
				keyboard = append(keyboard, row)
				row = []tgbotapi.InlineKeyboardButton{}
			}
		}
	}

	if len(keyboard) == 0 {
		b.sendMessage(chatID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
		return
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) showEngineTypes(chatID int64) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, engineType := range models.EngineTypes {
		key := models.EngineTypeKeys[engineType]
		row := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				engineType,
				fmt.Sprintf("engine_%s", key),
			),
		}
		keyboard = append(keyboard, row)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) showProblemAppeared(chatID int64) {
	text := "–ö–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, option := range models.ProblemAppeared {
		key := models.ProblemAppearedKeys[option]
		row := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				option,
				fmt.Sprintf("appeared_%s", key),
			),
		}
		keyboard = append(keyboard, row)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) showProblemFrequency(chatID int64) {
	text := "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏?"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, option := range models.ProblemFrequencies {
		key := models.ProblemFrequencyKeys[option]
		row := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				option,
				fmt.Sprintf("frequency_%s", key),
			),
		}
		keyboard = append(keyboard, row)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) handleDateSelection(ctx context.Context, callback *tgbotapi.CallbackQuery, session *models.UserSession) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	dateID := strings.TrimPrefix(data, "date_")
	if objectID, err := primitive.ObjectIDFromHex(dateID); err == nil {
		// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
		availableDate, err := b.dbService.GetAvailableDateByID(ctx, objectID)
		if err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã: %v", err)
			b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
		b.showTimeSlots(chatID, availableDate)
		b.answerCallback(callback.ID, "")
	} else {
		b.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
	}
}

func (b *Bot) handleTimeSelection(ctx context.Context, callback *tgbotapi.CallbackQuery, session *models.UserSession) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	timeSlot := strings.TrimPrefix(data, "time_")
	parts := strings.Split(timeSlot, "_")
	if len(parts) == 2 {
		dateID := parts[0]
		timeStr := parts[1]

		if objectID, err := primitive.ObjectIDFromHex(dateID); err == nil {
			// –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É
			request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
			if err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
				b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				return
			}

			// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
			availableDate, err := b.dbService.GetAvailableDateByID(ctx, objectID)
			if err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã: %v", err)
				b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				return
			}

			// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
			appointmentTime := time.Date(
				availableDate.Date.Year(),
				availableDate.Date.Month(),
				availableDate.Date.Day(),
				0, 0, 0, 0, availableDate.Date.Location(),
			)

			// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
			if t, err := time.Parse("15:04", timeStr); err == nil {
				appointmentTime = appointmentTime.Add(time.Duration(t.Hour())*time.Hour + time.Duration(t.Minute())*time.Minute)
			}

			request.AppointmentDate = appointmentTime
			request.Stage = models.StageCompleted
			request.Status = "completed"

			if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
				b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				return
			}

			session.Stage = models.StageCompleted
			b.dbService.SaveUserSession(ctx, session)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
			confirmationText := fmt.Sprintf(`‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:
üë§ –ò–º—è: %s
üìû –ö–æ–Ω—Ç–∞–∫—Ç: %s
üöó –ú–æ–¥–µ–ª—å: %s %s
üîß –ü—Ä–æ–±–ª–µ–º–∞: %s
üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: %s

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.`,
				request.Name, request.Contact, request.VolvoModel, request.Year,
				request.Problem, appointmentTime.Format("02.01.2006 –≤ 15:04"))

			b.sendMessage(chatID, confirmationText)
			b.answerCallback(callback.ID, "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
		} else {
			b.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
		}
	} else {
		b.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
	}
}

func (b *Bot) handleEngineTypeSelection(ctx context.Context, callback *tgbotapi.CallbackQuery, session *models.UserSession) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	engineKey := strings.TrimPrefix(data, "engine_")
	engineType := models.EngineTypeValues[engineKey]

	request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	request.EngineType = engineType
	if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	b.sendMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ):")
	b.answerCallback(callback.ID, "")
}

func (b *Bot) handleProblemAppearedSelection(ctx context.Context, callback *tgbotapi.CallbackQuery, session *models.UserSession) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	appearedKey := strings.TrimPrefix(data, "appeared_")
	appeared := models.ProblemAppearedValues[appearedKey]

	request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	request.ProblemFirstAppeared = appeared
	if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	b.showProblemFrequency(chatID)
	b.answerCallback(callback.ID, "")
}

func (b *Bot) handleProblemFrequencySelection(ctx context.Context, callback *tgbotapi.CallbackQuery, session *models.UserSession) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	frequencyKey := strings.TrimPrefix(data, "frequency_")
	frequency := models.ProblemFrequencyValues[frequencyKey]

	request, err := b.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	request.ProblemFrequency = frequency
	if err := b.dbService.SaveServiceRequest(ctx, request); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		b.answerCallback(callback.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	b.sendMessage(chatID, "–í–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: \"–º–∞—à–∏–Ω–∞ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è\", \"–ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—Ä–º–æ–∑–∞\")")
	b.answerCallback(callback.ID, "")
}

func (b *Bot) answerCallback(callbackID string, text string) {
	callback := tgbotapi.NewCallback(callbackID, text)
	if _, err := b.api.Request(callback); err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
}

// getWeekdayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
func getWeekdayName(weekday time.Weekday) string {
	weekdays := map[time.Weekday]string{
		time.Monday:    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		time.Tuesday:   "–≤—Ç–æ—Ä–Ω–∏–∫",
		time.Wednesday: "—Å—Ä–µ–¥–∞",
		time.Thursday:  "—á–µ—Ç–≤–µ—Ä–≥",
		time.Friday:    "–ø—è—Ç–Ω–∏—Ü–∞",
		time.Saturday:  "—Å—É–±–±–æ—Ç–∞",
		time.Sunday:    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	}
	return weekdays[weekday]
}
