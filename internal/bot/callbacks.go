package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"volvomaster/internal/models"
	"volvomaster/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CallbackHandlers struct {
	api       *tgbotapi.BotAPI
	dbService *services.DatabaseService
}

func NewCallbackHandlers(api *tgbotapi.BotAPI, dbService *services.DatabaseService) *CallbackHandlers {
	return &CallbackHandlers{
		api:       api,
		dbService: dbService,
	}
}

func (c *CallbackHandlers) HandleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	ctx := context.Background()
	userID := callback.From.ID
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	c.api.Request(tgbotapi.NewCallback(callback.ID, ""))

	session, err := c.dbService.GetUserSession(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		return
	}

	request, err := c.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback
	if strings.HasPrefix(data, "engine_") {
		c.handleEngineType(callback, session, request, data)
	} else if strings.HasPrefix(data, "appeared_") {
		c.handleProblemAppeared(callback, session, request, data)
	} else if strings.HasPrefix(data, "freq_") {
		c.handleProblemFrequency(callback, session, request, data)
	} else if strings.HasPrefix(data, "date_") {
		c.handleDateSelection(callback, session, request, data)
	}
}

func (c *CallbackHandlers) handleEngineType(callback *tgbotapi.CallbackQuery, session *models.UserSession, request *models.ServiceRequest, data string) {
	ctx := context.Background()
	chatID := callback.Message.Chat.ID

	engineType := strings.TrimPrefix(data, "engine_")
	request.EngineType = engineType
	session.Data["step"] = "engine_volume"

	if err := c.dbService.SaveServiceRequest(ctx, request); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}
	if err := c.dbService.SaveUserSession(ctx, session); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	edit := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID,
		fmt.Sprintf("‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: %s", engineType))
	c.api.Send(edit)

	c.sendMessage(chatID, "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.0, 2.4, 3.0). –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é':")
}

func (c *CallbackHandlers) handleProblemAppeared(callback *tgbotapi.CallbackQuery, session *models.UserSession, request *models.ServiceRequest, data string) {
	ctx := context.Background()
	chatID := callback.Message.Chat.ID

	appeared := strings.TrimPrefix(data, "appeared_")
	request.ProblemFirstAppeared = appeared
	session.Data["step"] = "problem_frequency"

	if err := c.dbService.SaveServiceRequest(ctx, request); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}
	if err := c.dbService.SaveUserSession(ctx, session); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	edit := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID,
		fmt.Sprintf("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ—è–≤–∏–ª–∞—Å—å: %s", appeared))
	c.api.Send(edit)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–±–ª–µ–º—ã
	keyboard := tgbotapi.NewInlineKeyboardMarkup()
	for _, freq := range models.ProblemFrequencies {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
		var callbackData string
		switch freq {
		case "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ":
			callbackData = "freq_always"
		case "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏":
			callbackData = "freq_periodic"
		case "–¢–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö":
			callbackData = "freq_conditional"
		default:
			callbackData = "freq_other"
		}

		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(freq, callbackData),
		)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}

	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏?")
	msg.ReplyMarkup = keyboard
	c.api.Send(msg)
}

func (c *CallbackHandlers) handleProblemFrequency(callback *tgbotapi.CallbackQuery, session *models.UserSession, request *models.ServiceRequest, data string) {
	ctx := context.Background()
	chatID := callback.Message.Chat.ID

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º callback –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
	var frequency string
	switch data {
	case "freq_always":
		frequency = "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"
	case "freq_periodic":
		frequency = "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏"
	case "freq_conditional":
		frequency = "–¢–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"
	default:
		frequency = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
	}
	request.ProblemFrequency = frequency
	session.Data["step"] = "safety_impact"

	if err := c.dbService.SaveServiceRequest(ctx, request); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}
	if err := c.dbService.SaveUserSession(ctx, session); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	edit := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID,
		fmt.Sprintf("‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã: %s", frequency))
	c.api.Send(edit)

	c.sendMessage(chatID, `–í–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?

–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞—à–∏–Ω–∞ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è", "–ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—Ä–º–æ–∑–∞", "–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"`)
}

func (c *CallbackHandlers) handleDateSelection(callback *tgbotapi.CallbackQuery, session *models.UserSession, request *models.ServiceRequest, data string) {
	ctx := context.Background()
	chatID := callback.Message.Chat.ID
	userID := callback.From.ID

	timestampStr := strings.TrimPrefix(data, "date_")
	timestamp, err := strconv.ParseInt(timestampStr, 10, 64)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: %v", err)
		return
	}

	selectedDate := time.Unix(timestamp, 0)
	request.AppointmentDate = selectedDate
	request.Status = "completed"
	session.Stage = models.StageCompleted

	if err := c.dbService.SaveServiceRequest(ctx, request); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}
	if err := c.dbService.SaveUserSession(ctx, session); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		c.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	edit := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID,
		fmt.Sprintf("‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: %s", selectedDate.Format("02.01.2006 15:04")))
	c.api.Send(edit)

	// –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫–ª—é—á–µ–Ω - –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	c.sendCompletionMessage(chatID, request)

	// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
	c.dbService.DeleteUserSession(ctx, userID)
}

func (c *CallbackHandlers) sendCompletionMessage(chatID int64, request *models.ServiceRequest) {
	completionText := fmt.Sprintf(`
üéâ –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!

üìã –†–µ–∑—é–º–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:

üë§ –ö–ª–∏–µ–Ω—Ç: %s
üìû –ö–æ–Ω—Ç–∞–∫—Ç: %s

üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å:
‚Ä¢ –ú–æ–¥–µ–ª—å: %s %s
‚Ä¢ –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: %s
‚Ä¢ –û–±—ä–µ–º: %s
‚Ä¢ –ü—Ä–æ–±–µ–≥: %s –∫–º

üîß –ü—Ä–æ–±–ª–µ–º–∞: %s
üìÖ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: %s

‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.
üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üöóüíô

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start`,
		request.Name,
		request.Contact,
		request.VolvoModel,
		request.Year,
		request.EngineType,
		request.EngineVolume,
		request.Mileage,
		request.Problem,
		request.AppointmentDate.Format("02.01.2006 15:04"))

	c.sendMessage(chatID, completionText)
}

func (c *CallbackHandlers) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeHTML
	_, err := c.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
	}
}
