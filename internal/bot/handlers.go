package bot

import (
	"context"
	"log"
	"strings"

	"volvomaster/internal/models"
	"volvomaster/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Handlers struct {
	api       *tgbotapi.BotAPI
	dbService *services.DatabaseService
	stages    *StageHandlers
	callbacks *CallbackHandlers
}

func NewHandlers(api *tgbotapi.BotAPI, dbService *services.DatabaseService) *Handlers {
	return &Handlers{
		api:       api,
		dbService: dbService,
		stages:    NewStageHandlers(api, dbService),
		callbacks: NewCallbackHandlers(api, dbService),
	}
}

func (h *Handlers) HandleMessage(message *tgbotapi.Message) {
	ctx := context.Background()
	userID := message.From.ID
	chatID := message.Chat.ID

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %d: %s", userID, message.Text)

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session, err := h.dbService.GetUserSession(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		h.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	session.ChatID = chatID

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if strings.HasPrefix(message.Text, "/") {
		h.handleCommand(message, session)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
	switch session.Stage {
	case models.StageStart:
		h.stages.StartNewRequest(session)
	case models.StagePersonalInfo:
		h.stages.HandlePersonalInfo(message, session)
	case models.StageCarInfo:
		h.stages.HandleCarInfo(message, session)
	case models.StageProblemInfo:
		h.stages.HandleProblemInfo(message, session)
	default:
		h.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
	}
}

func (h *Handlers) handleCommand(message *tgbotapi.Message, session *models.UserSession) {
	ctx := context.Background()
	chatID := message.Chat.ID

	switch message.Text {
	case "/start":
		h.stages.StartNewRequest(session)
	case "/cancel":
		h.dbService.DeleteUserSession(ctx, session.UserID)
		h.sendMessage(chatID, "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
	case "/help":
		helpText := `
üõ† –ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Volvo

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è Volvo.
–ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
		`
		h.sendMessage(chatID, helpText)
	}
}

func (h *Handlers) HandleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	h.callbacks.HandleCallbackQuery(callback)
}

func (h *Handlers) HandleChatMemberUpdate(update *tgbotapi.ChatMemberUpdated) {
	chatID := update.Chat.ID
	userID := update.From.ID
	newStatus := update.NewChatMember.Status
	oldStatus := update.OldChatMember.Status

	log.Printf("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ %d: %s -> %s", chatID, oldStatus, newStatus)

	// –ï—Å–ª–∏ –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
	if newStatus == "kicked" {
		log.Printf("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", userID)
		ctx := context.Background()
		// –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.dbService.DeleteUserSession(ctx, userID)
		log.Printf("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –æ—á–∏—â–µ–Ω—ã", userID)
	}

	// –ï—Å–ª–∏ –±–æ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
	if oldStatus == "kicked" && newStatus == "member" {
		log.Printf("–ë–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", userID)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		h.sendMessage(chatID, "üëã –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
	}
}

func (h *Handlers) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeHTML
	_, err := h.api.Send(msg)
	if err != nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
		if strings.Contains(err.Error(), "bot was blocked by the user") {
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞", chatID)
			// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			ctx := context.Background()
			h.dbService.DeleteUserSession(ctx, chatID)
		} else if strings.Contains(err.Error(), "chat not found") {
			log.Printf("–ß–∞—Ç %d –Ω–µ –Ω–∞–π–¥–µ–Ω", chatID)
		} else if strings.Contains(err.Error(), "user is deactivated") {
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", chatID)
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
		}
	}
}
