package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"volvomaster/internal/models"
	"volvomaster/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type StageHandlers struct {
	api       *tgbotapi.BotAPI
	dbService *services.DatabaseService
}

func NewStageHandlers(api *tgbotapi.BotAPI, dbService *services.DatabaseService) *StageHandlers {
	return &StageHandlers{
		api:       api,
		dbService: dbService,
	}
}

func (s *StageHandlers) StartNewRequest(session *models.UserSession) {
	ctx := context.Background()
	chatID := session.ChatID

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
	request := &models.ServiceRequest{
		UserID:    session.UserID,
		ChatID:    chatID,
		Stage:     models.StagePersonalInfo,
		Status:    "in_progress",
		CreatedAt: time.Now(),
	}

	err := s.dbService.SaveServiceRequest(ctx, request)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
	session.Stage = models.StagePersonalInfo
	session.RequestID = request.ID
	session.Data = make(map[string]interface{})
	session.Data["step"] = "name"

	err = s.dbService.SaveUserSession(ctx, session)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
	}

	welcomeText := `
üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Volvo!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

üìù –≠–¢–ê–ü 1: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`

	s.sendMessage(chatID, welcomeText)
}

func (s *StageHandlers) HandlePersonalInfo(message *tgbotapi.Message, session *models.UserSession) {
	ctx := context.Background()
	chatID := message.Chat.ID
	text := strings.TrimSpace(message.Text)

	if text == "" {
		s.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
		return
	}

	step, ok := session.Data["step"].(string)
	if !ok {
		step = "name"
	}

	request, err := s.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
		return
	}

	switch step {
	case "name":
		request.Name = text
		session.Data["step"] = "contact"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		s.sendMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏:")

	case "contact":
		request.Contact = text
		session.Stage = models.StageCarInfo
		session.Data["step"] = "model"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		carInfoText := `
‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üöó –≠–¢–ê–ü 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ

–ö–∞–∫–∞—è —É –≤–∞—Å –º–æ–¥–µ–ª—å Volvo? (–Ω–∞–ø—Ä–∏–º–µ—Ä: XC90, XC60, S60, V90 –∏ —Ç.–¥.)`

		s.sendMessage(chatID, carInfoText)
	}
}

func (s *StageHandlers) HandleCarInfo(message *tgbotapi.Message, session *models.UserSession) {
	ctx := context.Background()
	chatID := message.Chat.ID
	text := strings.TrimSpace(message.Text)

	if text == "" {
		s.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
		return
	}

	step, ok := session.Data["step"].(string)
	if !ok {
		step = "model"
	}

	request, err := s.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
		return
	}

	switch step {
	case "model":
		request.VolvoModel = text
		session.Data["step"] = "year"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		s.sendMessage(chatID, "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

	case "year":
		request.Year = text
		session.Data["step"] = "engine_type"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
		keyboard := tgbotapi.NewInlineKeyboardMarkup()
		for _, engineType := range models.EngineTypes {
			row := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(engineType, "engine_"+engineType),
			)
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
		}

		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:")
		msg.ReplyMarkup = keyboard
		s.api.Send(msg)

	case "engine_volume":
		request.EngineVolume = text
		session.Data["step"] = "mileage"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		s.sendMessage(chatID, "–ü—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç (–≤ –∫–º):")

	case "mileage":
		request.Mileage = text
		session.Stage = models.StageProblemInfo
		session.Data["step"] = "problem"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		problemInfoText := `
‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üîß –≠–¢–ê–ü 3: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?

–ù–∞–ø—Ä–∏–º–µ—Ä: "–≥—Ä–µ–º–∏—Ç —Å–ø–µ—Ä–µ–¥–∏", "–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –º–∞—Å–ª–æ", "–æ—à–∏–±–∫–∞ –ø–æ –¥–≤–∏–≥–∞—Ç–µ–ª—é", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª–∏–º–∞—Ç"`

		s.sendMessage(chatID, problemInfoText)
	}
}

func (s *StageHandlers) HandleProblemInfo(message *tgbotapi.Message, session *models.UserSession) {
	ctx := context.Background()
	chatID := message.Chat.ID
	text := strings.TrimSpace(message.Text)

	if text == "" {
		s.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
		return
	}

	step, ok := session.Data["step"].(string)
	if !ok {
		step = "problem"
	}

	request, err := s.dbService.GetServiceRequest(ctx, session.RequestID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
		s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
		return
	}

	switch step {
	case "problem":
		request.Problem = text
		session.Data["step"] = "problem_appeared"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞
		keyboard := tgbotapi.NewInlineKeyboardMarkup()
		for _, option := range models.ProblemAppeared {
			row := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(option, "appeared_"+option),
			)
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
		}

		msg := tgbotapi.NewMessage(chatID, "–ö–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?")
		msg.ReplyMarkup = keyboard
		s.api.Send(msg)

	case "problem_frequency":
		request.ProblemFrequency = text
		session.Data["step"] = "safety_impact"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		s.sendMessage(chatID, `–í–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?

–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞—à–∏–Ω–∞ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è", "–ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—Ä–º–æ–∑–∞", "–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"`)

	case "safety_impact":
		request.SafetyImpact = text
		session.Data["step"] = "previous_repairs"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		s.sendMessage(chatID, `–£–∂–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏?

–ï—Å–ª–∏ –¥–∞ ‚Äî —á—Ç–æ –¥–µ–ª–∞–ª–∏ –∏ –≥–¥–µ? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"`)

	case "previous_repairs":
		request.PreviousRepairs = text
		session.Data["step"] = "recent_changes"

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		s.sendMessage(chatID, `–ú–µ–Ω—è–ª–∏ –ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ?

–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–µ–Ω—è–ª–∏ –ø–æ–¥–≤–µ—Å–∫—É –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥", "–Ω–µ–¥–∞–≤–Ω–æ –º–µ–Ω—è–ª–∏ –º–∞—Å–ª–æ". –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"`)

	case "recent_changes":
		request.RecentChanges = text
		session.Stage = models.StageDateSelection

		if err := s.dbService.SaveServiceRequest(ctx, request); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}
		if err := s.dbService.SaveUserSession(ctx, session); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
			s.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			return
		}

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
		s.showAvailableDates(chatID)
	}
}

func (s *StageHandlers) showAvailableDates(chatID int64) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
	s.showFallbackDates(chatID)
}

// showFallbackDates –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
func (s *StageHandlers) showFallbackDates(chatID int64) {
	problemInfoComplete := `
‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üìÖ –≠–¢–ê–ü 4: –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞:`

	s.sendMessage(chatID, problemInfoComplete)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 2 –Ω–µ–¥–µ–ª–∏ (—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏, 9:00-17:00)
	keyboard := tgbotapi.NewInlineKeyboardMarkup()
	now := time.Now()

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
	dateCount := 0
	for days := 1; days <= 14 && dateCount < 10; days++ {
		date := now.AddDate(0, 0, days)

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
		if date.Weekday() == time.Saturday || date.Weekday() == time.Sunday {
			continue
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (9:00, 11:00, 13:00, 15:00)
		for hour := 9; hour <= 15; hour += 2 {
			slot := time.Date(date.Year(), date.Month(), date.Day(), hour, 0, 0, 0, date.Location())
			dateStr := slot.Format("02.01.2006 15:04")
			weekday := getWeekdayRussian(slot.Weekday())
			buttonText := fmt.Sprintf("%s (%s)", dateStr, weekday)

			row := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, "date_"+strconv.FormatInt(slot.Unix(), 10)),
			)
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
			dateCount++

			if dateCount >= 10 {
				break
			}
		}
	}

	msg := tgbotapi.NewMessage(chatID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):")
	msg.ReplyMarkup = keyboard
	s.api.Send(msg)
}

func (s *StageHandlers) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeHTML
	_, err := s.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
	}
}
